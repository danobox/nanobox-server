// Automatically generated by MockGen. DO NOT EDIT!
// Source: fs.go

package mock_fs

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of FsUtil interface
type MockFsUtil struct {
	ctrl     *gomock.Controller
	recorder *_MockFsUtilRecorder
}

// Recorder for MockFsUtil (not exported)
type _MockFsUtilRecorder struct {
	mock *MockFsUtil
}

func NewMockFsUtil(ctrl *gomock.Controller) *MockFsUtil {
	mock := &MockFsUtil{ctrl: ctrl}
	mock.recorder = &_MockFsUtilRecorder{mock}
	return mock
}

func (_m *MockFsUtil) EXPECT() *_MockFsUtilRecorder {
	return _m.recorder
}

func (_m *MockFsUtil) CreateDirs() error {
	ret := _m.ctrl.Call(_m, "CreateDirs")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsUtilRecorder) CreateDirs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDirs")
}

func (_m *MockFsUtil) Clean() error {
	ret := _m.ctrl.Call(_m, "Clean")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFsUtilRecorder) Clean() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clean")
}

func (_m *MockFsUtil) Touch(file string) {
	_m.ctrl.Call(_m, "Touch", file)
}

func (_mr *_MockFsUtilRecorder) Touch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Touch", arg0)
}

func (_m *MockFsUtil) LibDirs() []string {
	ret := _m.ctrl.Call(_m, "LibDirs")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockFsUtilRecorder) LibDirs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LibDirs")
}

func (_m *MockFsUtil) UserPayload() map[string]interface{} {
	ret := _m.ctrl.Call(_m, "UserPayload")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

func (_mr *_MockFsUtilRecorder) UserPayload() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserPayload")
}
